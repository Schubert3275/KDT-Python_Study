# -----------------------------------------------------------------------------
# 반복문 - 2 while 반복문
# - 반복의 횟수가 정해지지 않은 경우에 사용
# - 반복의 횟수가 정해진 경우에도 사용 가능함
# -----------------------------------------------------------------------------
# [ 요청 ]  사용자로부터 좋아하는 음식명을 입력 받아 주세요.
#           => input()
#          단, 사용자가 '끝'이라는 음식명 입력 전까지 입력 받으세요.
#          => 몇 번 입력 받아야 입력이 끝날지 알 수 없음
# -----------------------------------------------------------------------------
import time

# -----------------------------------------------------------------------------
# [ 요청 ]  사용자로부터 좋아하는 음식명을 입력 받아 주세요.
#           => input()
#          단, Top 5로 가장 좋아 하는 음식 5개만 입력 받으세요.
#          => 사용자의 Top5 음식명 출력
# -----------------------------------------------------------------------------
TEST = False, False, True  # Flag 변수 - 실습용 코드 제어 변수

if TEST[0]:
    foodList = []
    for i in range(5):
        foodList.append(input(f"{i+1}번째로 좋아하는 음식명 입력: "))
    # print("가장 좋아하는 음식 Top5:", ', '.join(foodList))

    # 결과 출력 ==>
    print("당신은 ", end='')
    for food in foodList:
        print(food, end=', ' if food != foodList[-1] else ' ')
    print("음식을 좋아하는 군요!")

    strFoods = ''
    for i in range(5):
        food = (input(f"{i+1}번째로 좋아하는 음식명 입력: "))
        strFoods += food + (', ' if i != 4 else '')

    # 결과 출력 ==>
    print(f'당신은 {strFoods} 음식을 좋아하는 군요!')

# -----------------------------------------------------------------------------
# 기본 while 문법
# while 조건식 :
# <--> 실행 코드
# <--> 실행 코드
# -----------------------------------------------------------------------------
# 타이머 프로그램 만들기 => 다운카운팅 : 10 9 8 7 ..... 1
if TEST[1]:
    downCnt = 10
    while downCnt > 0:
        print(f'\r다운 카운팅 {downCnt}초', end='')
        time.sleep(1)
        downCnt -= 1
    print("\n발사!")

    # 타이머 프로그램 만들기 => 업카운팅 : 1 2 3 4 ..... 10
    upCnt = 1
    while upCnt <= 10:
        time.sleep(1)
        print(f'\r업 카운팅 {upCnt}초', end='')
        upCnt += 1
    print("\n발사!")

# -----------------------------------------------------------------------------
# 동일한 문제를 for ~ in 반복문 구현
# -----------------------------------------------------------------------------
if TEST[2]:
    for i in reversed(range(1, 11)):
        print(f'\r다운 카운팅 {i}초', end='')
        time.sleep(1)
    print("\n발사!")

    for i in range(1, 11):
        time.sleep(1)
        print(f'\r업 카운팅 {i}초', end='')
    print("\n발사!")
