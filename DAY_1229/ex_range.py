# -----------------------------------------------------------------------------
# range() 내장함수
# - 숫자의 범위를 생성하는
# - 반환값/결과값/리턴값 : range 타입
# -----------------------------------------------------------------------------
# 1 ~ 20 으로 구성된 정수 데이터 생성
nums = range(20)

print(f'nums => {nums}, {type(nums)}')
print(f'nums => {nums[0]}, {type(nums[0])}')
print(f'nums => {nums[-1]}, {type(nums[-1])}')

print(f'nums => {len(nums)}개')

# 앞부분 5개 원소까지만 추출 => 슬라이싱
print(f'nums[0:5] => {nums[0:5]}, {type(nums[0:5])}')

# range ==> list 형 변환하기 => list( 데이터 )
print(f'list(nums) => {list(nums)}')

# 0~100으로 구성된 정수 리스트 생성
numList = list(range(101))
numLinst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
print(f'numList => {numList}')

# -----------------------------------------------------------------------------
# range(시작값, 끝값)
# - 시작값 =>  기본 : 0  range(10)    => 0 <= ~ < 10  0,1,2,3,4,5,6,7,8,9
# - 시작값 =>  기본 : 1  range(1, 10) => 1 <= ~ < 10  1,2,3,4,5,6,7,8,9
# - 시작값 =>  기본 : 5  range(5, 10) => 5 <= ~ < 10  5,6,7,8,9
# -----------------------------------------------------------------------------
# 1~30 범위에서 3의 배수만으로 구성된 리스트 생성
# 3, 6, 9, 12, 15, 18, 21, 24, 27
three = [3, 6, 9, 12, 15, 18, 21, 24, 27]

# 1~100 범위에서 3의 배수만으로 구성된 리스트 생성
threes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39]

# -----------------------------------------------------------------------------
# range(시작값, 끝값, 증감)
# - 시작값 =>  기본 : 0, 증감 : 1  range(10)       => 0 <= ~ < 10  0,1,2,3,4,5,6,7,8,9
# - 시작값 =>  기본 : 1, 증감 : 1  range(1, 10)    => 1 <= ~ < 10  1,2,3,4,5,6,7,8,9
# - 시작값 =>  기본 : 1, 증감 : 2  range(1, 10, 2) => 1 <= ~ < 10  1,3,5,7,9
# -----------------------------------------------------------------------------
# 1~30 범위에서 3의 배수만으로 구성된 리스트 생성
threes1 = list(range(3, 31, 3))
print(threes1)

# 1~1000 범위에서 3의 배수만으로 구성된 리스트 생성
threes1 = list(range(3, 1001, 3))
print(threes1)
